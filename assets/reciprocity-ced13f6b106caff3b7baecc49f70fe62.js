define("reciprocity/app",["exports","ember","ember/resolver","ember/load-initializers","./config/environment"],function(e,t,s,a,n){"use strict";t["default"].MODEL_FACTORY_INJECTIONS=!0;var r=t["default"].Application.extend({modulePrefix:n["default"].modulePrefix,podModulePrefix:n["default"].podModulePrefix,Resolver:s["default"]});a["default"](r,n["default"].modulePrefix),e["default"]=r}),define("reciprocity/controllers/application",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Controller.extend({username:"",token:"",repositories:function(){return[]}.property(),showIndex:!1,init:function(){this._super();var e=Cookies.get("username"),t=Cookies.get("token"),s=Cookies.get("repositories");e&&this.set("username",e),t&&this.set("token",t),s&&this.set("repositories",s.split(","))},usernameValid:!1,usernameErrorText:"",verifyUsername:function(){var e=this,t="https://api.github.com/users/"+this.get("username");this.githubAjax(t).then(function(){e.set("usernameValid",!0),e.set("usernameErrorText","")})["catch"](function(){e.set("usernameValid",!1),e.set("usernameErrorText","User not found.")})},tokenValid:!1,tokenErrorText:"",verifyToken:function(){if(!this.get("usernameValid"))return this.set("tokenValid",!1),void this.set("tokenErrorText","Username is invalid.");var e=this,t=this.get("username");this.githubAjax("https://api.github.com/user").then(function(s){return s.login!==t?(e.set("tokenValid",!1),e.set("tokenErrorText","That token is for a different user."),console.log("Error logging in: username does not match."),void console.log("Expected: "+t+" but was: "+s.login)):(e.set("tokenValid",!0),void e.set("tokenErrorText",""))})["catch"](function(){e.set("tokenValid",!1),e.set("tokenErrorText","Authentication failed.")})}})}),define("reciprocity/controllers/repositories",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Controller.extend({needs:["application"],selectedRepositories:t["default"].computed.alias("controllers.application.repositories"),allRepositories:function(){return(this.get("model")||[]).mapBy("full_name").sort()}.property("model.[]"),displayRepoWrappers:function(){var e=this.get("selectedRepositories");return this.get("allRepositories").map(function(s){return t["default"].Object.create({name:s,checked:e.contains(s)})})}.property("allRepositories.[]","selectedRepositories.[]"),persistenceObserver:function(){Cookies.set("repositories",this.get("selectedRepositories"))}.on("init").observes("selectedRepositories.[]"),actions:{toggleChecked:function(e){this.get("selectedRepositories").contains(e)?this.get("selectedRepositories").removeObject(e):this.get("selectedRepositories").pushObject(e)}}})}),define("reciprocity/controllers/results",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Controller.extend({needs:["application"],username:t["default"].computed.alias("controllers.application.username"),allStats:function(){var e=this,t=this.get("username");return this.get("model").map(function(s){var a=s[0],n=s[1],r=a.user.login,o=e.getReviewersFromComments(r,n),i=o.length>0&&(r===t||o.contains(t)),l=r!==t,u="";1===o.length?u=o[0]:2===o.length?u=o.join(" and "):o.length>2&&(u=o.slice(0,-1).join(", ")+", and "+o[o.length-1]);var h=new Date(a.created_at);return{repoName:a.base.repo.full_name,additions:a.additions,deletions:a.deletions,loc:a.additions+a.deletions,author:r.toLowerCase(),reviewers:o,isPositive:l,formattedReviewers:u,date:h,formattedDate:h.toLocaleDateString(),url:a.url,htmlUrl:a.html_url,valid:i}})}.property("model","username"),parseReviewersFromComment:function(e,t){return t.user.login===e?(t.body.match(/@[a-zA-Z-]+/g)||[]).map(function(e){return e.slice(1).toLowerCase()}):[t.user.login.toLowerCase()]},getReviewersFromComments:function(e,t){var s=this,a=t.filter(function(e){return e.body.indexOf("LGTM")>-1}),n=a.map(function(t){return s.parseReviewersFromComment(e,t)});return _.union(_.flatten(n)).sort()},validStats:t["default"].computed.filterBy("allStats","valid"),statsSorting:["date:desc"],stats:t["default"].computed.sort("validStats","statsSorting"),prSizeStats:function(){var e,t,s=this.get("username"),a={large:{positive:0,negative:0},small:{positive:0,negative:0}};return this.get("stats").forEach(function(n){e="positive",t="large",n.loc<200&&(t="small"),n.author===s&&(e="negative"),a[t][e]+=1}),a}.property("stats","username"),topReviewers:function(){var e={},t=this.get("username"),s=[];this.get("stats").forEach(function(s){s.author===t&&s.reviewers.forEach(function(t){e[t]||(e[t]=0),e[t]+=s.loc})});for(var a in e)s.pushObject({username:a,loc:e[a]});return s.sortBy("loc"),s.slice(0,3)}.property("stats","username"),totalGoodwill:function(){var e;return this.get("stats").reduce(function(t,s){return e=s.loc,s.isPositive||(e*=-1),t+e},0)}.property("stats"),absTotalGoodwill:function(){return Math.abs(this.get("totalGoodwill"))}.property("totalGoodwill"),totalGoodwillIsPositive:function(){return this.get("totalGoodwill")>=0}.property("totalGoodwill")})}),define("reciprocity/controllers/username",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Controller.extend({needs:["application"],username:t["default"].computed.alias("controllers.application.username"),token:t["default"].computed.alias("controllers.application.token"),persistenceObserver:function(){Cookies.set("username",this.get("username")),Cookies.set("token",this.get("token"))}.observes("username","token")})}),define("reciprocity/helpers/fa-icon",["exports","ember"],function(e,t){"use strict";var s=/^fa\-.+/,a=t["default"].Logger.warn,n=function(e,n){if("string"!==t["default"].typeOf(e)){var r="fa-icon: no icon specified";return a(r),t["default"].String.htmlSafe(r)}var o=n.hash,i=[],l="";i.push("fa"),e.match(s)||(e="fa-"+e),i.push(e),o.spin&&i.push("fa-spin"),o.flip&&i.push("fa-flip-"+o.flip),o.rotate&&i.push("fa-rotate-"+o.rotate),o.lg&&(a("fa-icon: the 'lg' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"lg\"}}"),i.push("fa-lg")),o.x&&(a("fa-icon: the 'x' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\""+o.x+'"}}'),i.push("fa-"+o.x+"x")),o.size&&("string"===t["default"].typeOf(o.size)&&o.size.match(/\d+/)&&(o.size=Number(o.size)),i.push("number"===t["default"].typeOf(o.size)?"fa-"+o.size+"x":"fa-"+o.size)),o.fixedWidth&&i.push("fa-fw"),o.listItem&&i.push("fa-li"),o.pull&&i.push("pull-"+o.pull),o.border&&i.push("fa-border"),o.classNames&&!t["default"].isArray(o.classNames)&&(o.classNames=[o.classNames]),t["default"].isEmpty(o.classNames)||Array.prototype.push.apply(i,o.classNames),l+="<";var u=o.tagName||"i";return l+=u,l+=" class='"+i.join(" ")+"'",o.title&&(l+=" title='"+o.title+"'"),(void 0===o.ariaHidden||o.ariaHidden)&&(l+=' aria-hidden="true"'),l+="></"+u+">",t["default"].String.htmlSafe(l)};e["default"]=t["default"].Handlebars.makeBoundHelper(n),e.faIcon=n}),define("reciprocity/helpers/github",["exports","ic-ajax"],function(e,t){"use strict";function s(e){var s=void 0===arguments[1]?null:arguments[1];return t["default"](s?{url:e,headers:{Accept:"application/json","Content-Type":"application/json",Authorization:"token "+s}}:e)}e["default"]={ajax:s}}),define("reciprocity/initializers/export-application-global",["exports","ember","../config/environment"],function(e,t,s){"use strict";function a(e,a){var n=t["default"].String.classify(s["default"].modulePrefix);s["default"].exportApplicationGlobal&&(window[n]=a)}e.initialize=a,e["default"]={name:"export-application-global",initialize:a}}),define("reciprocity/router",["exports","ember","./config/environment"],function(e,t,s){"use strict";var a=t["default"].Router.extend({location:s["default"].locationType});a.map(function(){this.route("username"),this.route("repositories"),this.route("results")}),e["default"]=a}),define("reciprocity/routes/index",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Route.extend({activate:function(){this.controllerFor("application").set("showIndex",!0)},deactivate:function(){this.controllerFor("application").set("showIndex",!1)}})}),define("reciprocity/routes/repositories",["exports","ember","../helpers/github"],function(e,t,s){"use strict";e["default"]=t["default"].Route.extend({model:function(){var e=this.controllerFor("application").get("username"),t=this.controllerFor("application").get("token"),a="https://api.github.com/users/"+e+"/starred?per_page=100";return s["default"].ajax(a,t)},afterModel:function(e){var t=this.controllerFor("application");t.set("repositories",t.get("repositories").filter(function(t){return e.mapBy("full_name").contains(t)}))}})}),define("reciprocity/routes/results",["exports","ember","../helpers/github"],function(e,t,s){"use strict";e["default"]=t["default"].Route.extend({model:function(){var e,a=this.controllerFor("application").get("username"),n=this.controllerFor("application").get("token"),r=this.controllerFor("application").get("repositories"),o=r.map(function(e){var t="https://api.github.com/search/issues?q=type:pr+involves:"+a+"+repo:"+e+"&per_page=100";return s["default"].ajax(t,n)});return t["default"].RSVP.all(o).then(function(e){var a=e.reduce(function(e,t){return e.concat(t.items)},[]);return t["default"].RSVP.all(a.map(function(e){return s["default"].ajax(e.pull_request.url,n)}))}).then(function(a){return e=a,t["default"].RSVP.all(a.map(function(e){return s["default"].ajax(e.comments_url,n)}))}).then(function(t){return _.zip([e,t])})}})}),define("reciprocity/templates/application",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Handlebars.template(function(e,s,a,n,r){function o(e,t){var s,n,r="";return t.buffer.push("\n  "),t.buffer.push(d((s=a.partial||e&&e.partial,n={hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["STRING"],data:t},s?s.call(e,"index",n):f.call(e,"partial","index",n)))),t.buffer.push("\n"),r}function i(e,t){var s,n,r,o="";return t.buffer.push("\n  <main>\n    <header>\n      "),n=a["link-to"]||e&&e["link-to"],r={hash:{"class":"step"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:m.noop,fn:m.program(4,l,t),contexts:[e],types:["STRING"],data:t},s=n?n.call(e,"username",r):f.call(e,"link-to","username",r),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n      "),n=a["link-to"]||e&&e["link-to"],r={hash:{"class":"step"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:m.noop,fn:m.program(6,u,t),contexts:[e],types:["STRING"],data:t},s=n?n.call(e,"repositories",r):f.call(e,"link-to","repositories",r),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n      "),n=a["link-to"]||e&&e["link-to"],r={hash:{"class":"step"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:m.noop,fn:m.program(8,h,t),contexts:[e],types:["STRING"],data:t},s=n?n.call(e,"results",r):f.call(e,"link-to","results",r),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n      <div class='step-bar'></div>\n    </header>\n    "),s=a._triageMustache.call(e,"outlet",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n  </main>\n"),o}function l(e,t){t.buffer.push("\n        <div class='circle'>1</div>\n        <div class='step-text'>User</div>\n      ")}function u(e,t){t.buffer.push("\n        <div class='circle'>2</div>\n        <div class='step-text'>Repositories</div>\n      ")}function h(e,t){t.buffer.push("\n        <div class='circle'>3</div>\n        <div class='step-text'>Results</div>\n      ")}this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,t["default"].Handlebars.helpers),r=r||{};var p,c="",f=a.helperMissing,d=this.escapeExpression,m=this;return p=a["if"].call(s,"showIndex",{hash:{},hashTypes:{},hashContexts:{},inverse:m.program(3,i,r),fn:m.program(1,o,r),contexts:[s],types:["ID"],data:r}),(p||0===p)&&r.buffer.push(p),r.buffer.push("\n"),c})}),define("reciprocity/templates/index",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Handlebars.template(function(e,s,a,n,r){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,t["default"].Handlebars.helpers),r=r||{};var o,i,l="",u=a.helperMissing,h=this.escapeExpression;return r.buffer.push("<div class='welcome'>\n  <div class='welcome-block'>\n    <div class='project-title'>RECIPROCITY</div>\n    <div class='tagline'>Review your GitHub code reviews</div>\n    "),r.buffer.push(h((o=a["link-to"]||s&&s["link-to"],i={hash:{"class":"start-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},o?o.call(s,"Start","username",i):u.call(s,"link-to","Start","username",i)))),r.buffer.push('\n  </div>\n  <p class=\'more-text\'>Or, read more...</p>\n</div>\n<main class=\'index\'>\n  <h1>What is this?</h1>\n  <p>\n    Reciprocity is a little tool that measures how much you give and take when\n    it comes to code review. It\'s intended as an easy way to check if you\'re\n    spending enough time helping out your team, or if you\'re freeloading a bit.\n  </p>\n  <p>\n    It only works with GitHub, but can analyze whichever repositories you\n    choose - public or private.\n  </p>\n  <p>\n    In a nutshell, Reciprocity scans through all the pull requests in\n    repositories you want to analyze, looking for comments that contain the\n    phrase "LGTM". If you LGTM\'d someone else\'s code, you\'ll get "goodwill"\n    points for each line of code. If someone else LGTM\'d your code, you\'ll lose\n    goodwill points.\n  </p>\n  <p>\n    There are also stats to see how you\'ve been doing over time, see who those\n    awesome people are who review your code, and measure "large" and "small"\n    pull requests (200 lines of code). Everyone knows lines of code is kind of\n    a terrible metric.\n  </p>\n\n  <h1>How does it work?</h1>\n  <p>\n    First, you\'ll enter your GitHub username. If you want to analyze private\n    repositories as well, you\'ll have to get a Personal Access Token from\n    GitHub too.\n  </p>\n  <p>\n    Then, you\'ll pick which repositories you want from the list of your starred\n    repositories. We use starred repositories because it\'s not practical to\n    scan every repository you\'ve ever worked in.\n  </p>\n  <p>\n    Reciprocity will scan through every pull request in each repository you\n    selected. It looks for comments that contain the phrase "LGTM", and\n    determines the author and reviewer(s) in each comment. It also handles a\n    couple special cases. For example, if the author of a pull request comments\n    "LGTM", Reciprocity assumes they are making a note of a verbal LGTM someone\n    else gave. So comments like "LGTM\'d by @otherdude" will attribute the LGTM\n    to "otherdude".\n  </p>\n  <p>\n    Finally, you\'ll see a summary of your stats and a list of all the pull\n    requests you\'ve been involved in!\n  </p>\n\n  <h1>About the author</h1>\n  <p>\n    Alex Zirbel is <a target="_blank"\n    href="http://github.com/azirbel">azirbel</a> on GitHub, and\n    <a target="_blank"\n    href="http://www.twitter.com/alexzirbel">@alexzirbel</a> on Twitter.\n  </p>\n</main>\n'),l})}),define("reciprocity/templates/repositories",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Handlebars.template(function(e,s,a,n,r){function o(e,t){var s,n="";return t.buffer.push("\n  <div "),t.buffer.push(d(a["bind-attr"].call(e,{hash:{"class":":repository repoWrapper.checked:checked"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push("\n  "),t.buffer.push(d(a.action.call(e,"toggleChecked","repoWrapper.name",{hash:{bubbles:!1},hashTypes:{bubbles:"BOOLEAN"},hashContexts:{bubbles:e},contexts:[e,e],types:["STRING","ID"],data:t}))),t.buffer.push(">\n    "),s=a["if"].call(e,"repoWrapper.checked",{hash:{},hashTypes:{},hashContexts:{},inverse:m.program(4,l,t),fn:m.program(2,i,t),contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n    <span class='repo-name'>"),s=a._triageMustache.call(e,"repoWrapper.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("</span>\n  </div>\n"),n}function i(e,t){var s,n,r="";return t.buffer.push("\n      "),t.buffer.push(d((s=a["fa-icon"]||e&&e["fa-icon"],n={hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["STRING"],data:t},s?s.call(e,"check-square-o",n):f.call(e,"fa-icon","check-square-o",n)))),t.buffer.push("\n    "),r}function l(e,t){var s,n,r="";return t.buffer.push("\n      "),t.buffer.push(d((s=a["fa-icon"]||e&&e["fa-icon"],n={hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["STRING"],data:t},s?s.call(e,"square-o",n):f.call(e,"fa-icon","square-o",n)))),t.buffer.push("\n    "),r}this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,t["default"].Handlebars.helpers),r=r||{};var u,h,p,c="",f=a.helperMissing,d=this.escapeExpression,m=this;return r.buffer.push("<h1 class='title'>Select Repositories</h1>\n\n<p class='last'>Here's a list of your starred repositories. Please select which ones you'd\nlike to analyze.</p>\n\n"),u=a.each.call(s,"repoWrapper","in","displayRepoWrappers",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(1,o,r),contexts:[s,s,s],types:["ID","ID","ID"],data:r}),(u||0===u)&&r.buffer.push(u),r.buffer.push("\n\n<div class='button-block'>\n  "),r.buffer.push(d((h=a["link-to"]||s&&s["link-to"],p={hash:{"class":"back-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},h?h.call(s,"Back","username",p):f.call(s,"link-to","Back","username",p)))),r.buffer.push("\n  "),r.buffer.push(d((h=a["link-to"]||s&&s["link-to"],p={hash:{"class":"home-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},h?h.call(s,"Home","index",p):f.call(s,"link-to","Home","index",p)))),r.buffer.push("\n  "),r.buffer.push(d((h=a["link-to"]||s&&s["link-to"],p={hash:{"class":"next-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},h?h.call(s,"Next","results",p):f.call(s,"link-to","Next","results",p)))),r.buffer.push("\n</div>\n"),c})}),define("reciprocity/templates/results",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Handlebars.template(function(e,s,a,n,r){function o(e,t){var s,n="";return t.buffer.push("\n      <p>"),s=a._triageMustache.call(e,"reviewer.username",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push(" - "),s=a._triageMustache.call(e,"reviewer.loc",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("</p>\n    "),n}function i(e,t){var s,n="";return t.buffer.push("\n  <a target='_blank' "),t.buffer.push(d(a["bind-attr"].call(e,{hash:{href:"stat.htmlUrl"},hashTypes:{href:"STRING"},hashContexts:{href:e},contexts:[],types:[],data:t}))),t.buffer.push(" class='pr-stat'>\n    <div class='left-1'>\n      <div "),t.buffer.push(d(a["bind-attr"].call(e,{hash:{"class":":loc stat.isPositive:positive:negative"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push(">\n        "),s=a._triageMustache.call(e,"stat.loc",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n      </div>\n    </div>\n    <div class='right-2'>\n      "),s=a["if"].call(e,"stat.isPositive",{hash:{},hashTypes:{},hashContexts:{},inverse:m.program(6,u,t),fn:m.program(4,l,t),contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n      <h4>"),s=a._triageMustache.call(e,"stat.formattedDate",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push(" in "),s=a._triageMustache.call(e,"stat.repoName",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("</h4>\n    </div>\n  </a>\n"),n}function l(e,t){var s,n="";return t.buffer.push("\n        <h4>You reviewed a pull request by "),s=a._triageMustache.call(e,"stat.author",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("</h4>\n      "),n}function u(e,t){var s,n="";return t.buffer.push("\n        <h4>"),s=a._triageMustache.call(e,"stat.formattedReviewers",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push(" reviewed your pull request</h4>\n      "),n}this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,t["default"].Handlebars.helpers),r=r||{};var h,p,c,f="",d=this.escapeExpression,m=this,b=a.helperMissing;return r.buffer.push("<h1 class='title'>Results & Analysis</h1>\n\n<div class='wrapper'>\n  <div class='left-2'>\n    <h2>Goodwill</h2>\n    <div "),r.buffer.push(d(a["bind-attr"].call(s,{hash:{"class":":goodwill totalGoodwillIsPositive:positive:negative"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:r}))),r.buffer.push(">\n      "),h=a._triageMustache.call(s,"absTotalGoodwill",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("\n    </div>\n  </div>\n  <div class='right-1'>\n    <h2>Top Reviewers</h2>\n    "),h=a.each.call(s,"reviewer","in","topReviewers",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(1,o,r),contexts:[s,s,s],types:["ID","ID","ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("\n  </div>\n</div>\n\n<div class=\"wrapper\">\n  <p>\n    Large pull requests: You authored\n    <span class='inline-positive'>"),h=a._triageMustache.call(s,"prSizeStats.large.negative",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("</span>\n    and reviewed\n    <span class='inline-negative'>"),h=a._triageMustache.call(s,"prSizeStats.large.positive",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("</span>.\n  </p>\n  <p>\n    Small pull requests: You authored\n    <span class='inline-positive'>"),h=a._triageMustache.call(s,"prSizeStats.small.negative",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("</span>\n    and reviewed\n    <span class='inline-negative'>"),h=a._triageMustache.call(s,"prSizeStats.small.positive",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("</span>.\n  </p>\n</div>\n\n"),h=a.each.call(s,"stat","in","stats",{hash:{},hashTypes:{},hashContexts:{},inverse:m.noop,fn:m.program(3,i,r),contexts:[s,s,s],types:["ID","ID","ID"],data:r}),(h||0===h)&&r.buffer.push(h),r.buffer.push("\n\n<div class='button-block'>\n  "),r.buffer.push(d((p=a["link-to"]||s&&s["link-to"],c={hash:{"class":"back-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},p?p.call(s,"Back","repositories",c):b.call(s,"link-to","Back","repositories",c)))),r.buffer.push("\n  "),r.buffer.push(d((p=a["link-to"]||s&&s["link-to"],c={hash:{"class":"home-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},p?p.call(s,"Home","index",c):b.call(s,"link-to","Home","index",c)))),r.buffer.push("\n</div>\n"),f})}),define("reciprocity/templates/username",["exports","ember"],function(e,t){"use strict";e["default"]=t["default"].Handlebars.template(function(e,s,a,n,r){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,t["default"].Handlebars.helpers),r=r||{};var o,i,l="",u=a.helperMissing,h=this.escapeExpression;return r.buffer.push("<h1 class='title'>Username and Authentication</h1>\n<h2>What is your GitHub username?</h2>\n<div class='username-input'>\n  "),r.buffer.push(h((o=a.input||s&&s.input,i={hash:{value:"username"},hashTypes:{value:"ID"},hashContexts:{value:s},contexts:[],types:[],data:r},o?o.call(s,i):u.call(s,"input",i)))),r.buffer.push("\n</div>\n\n<h2>Want to analyze private repositories?</h2>\n<p>\n  Skip this step if you're only interested in open-source repositories. If you\n  want to analyze repositories you have private access to, though, you'll need\n  to grab a private access token from GitHub.\n</p>\n<div class='token-input'>\n  "),r.buffer.push(h((o=a.input||s&&s.input,i={hash:{value:"token"},hashTypes:{value:"ID"},hashContexts:{value:s},contexts:[],types:[],data:r},o?o.call(s,i):u.call(s,"input",i)))),r.buffer.push("\n</div>\n\n<div class='button-block'>\n  "),r.buffer.push(h((o=a["link-to"]||s&&s["link-to"],i={hash:{"class":"home-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},o?o.call(s,"Home","index",i):u.call(s,"link-to","Home","index",i)))),r.buffer.push("\n  "),r.buffer.push(h((o=a["link-to"]||s&&s["link-to"],i={hash:{"class":"next-btn"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[s,s],types:["STRING","STRING"],data:r},o?o.call(s,"Next","repositories",i):u.call(s,"link-to","Next","repositories",i)))),r.buffer.push("\n</div>\n"),l})}),define("reciprocity/config/environment",["ember"],function(e){var t="reciprocity";try{var s=t+"/config/environment",a=e["default"].$('meta[name="'+s+'"]').attr("content"),n=JSON.parse(unescape(a));return{"default":n}}catch(r){throw new Error('Could not read config from meta tag with name "'+s+'".')}}),runningTests?require("reciprocity/tests/test-helper"):require("reciprocity/app")["default"].create({});